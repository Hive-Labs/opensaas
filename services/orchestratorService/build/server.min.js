/*! notoja-orchestrator_service 2013-08-01 */
function parseConfigurationFile(a){if(fs.existsSync("./ServerConfiguration.json")){var b=fs.readFileSync("./ServerConfiguration.json","utf8");b=JSON.parse(b),dbService.init(b.dbService,"OrchestratorService"),runners.init(b.dbService),applications.init(b.dbService,runners),bareMetalList=b.bareMetalMachines,a()}else{var c={};c.bareMetalMachines=[],console.log("Welcome! This seems to be your first time because you have not yet setup your server configuration file. I will ask you a series of questions and automatically create this for you (how nice of me)."),ask("1) How many node runners would you like to create? (minimum 2 required)",".",function(b){ask("2) OK. What is the location of the dbService (eg. localhost:2001)",".",function(d){function e(d){if(d>b){var f="ServerConfiguration.json";fs.writeFile(f,JSON.stringify(c,null,4),function(b){b?console.log(b):(console.log("THANKS! I have made a file called ServerConfiguration.json and I will remember this next time."),parseConfigurationFile(a))})}else ask(d+3+"a) What is the IP of runner "+d+"? (eg. localhost)",".",function(a){ask(d+3+"b) What is the SSH username of runner "+d+"? (eg. steve)",".",function(b){ask(d+3+"c) What is the SSH password of runner "+d+"? (eg. fluffybunnies)",".",function(f){ask(d+3+"d) Where is the nodeRunnerService located in runner "+d+"? (eg. ~/notoja/notoja-saas/services/nodeRunnerService/server.js)",".",function(g){ask(d+3+"e) Where is the port that runner "+d+" should run on? (eg. 300"+d+")",".",function(h){c.bareMetalMachines.push({ip:a,username:b,password:f,runnerLocation:g,runnerPort:h}),e(d+1)})})})})})}c.dbService=d,e(1)})})}}function spawnRunner(a){a?runners.removeRunner(a):a=generateID();var b=bareMetalList[currentRoundRobinIndex],c=new SSHClient(b.ip,b.username,b.password),d="ORCHESTRATOR_IP=http://"+b.ip+":"+app.get("port")+" RUNNER_ID="+a+" PORT="+b.runnerPort+" node "+b.runnerLocation;winston.log("info","Executing SSH:"+d),c.exec(d),runners.add(a,"someName","http://"+b.ip+":"+b.runnerPort,!1),currentRoundRobinIndex++,currentRoundRobinIndex>=bareMetalList.length&&(currentRoundRobinIndex=0)}function monitorRunners(){runners.getAvailableRunner()?(runnerList[runnerIndex]&&new Date-runnerList[runnerIndex].ping>TIMEOUT_TIME&&(winston.log("info","runner "+runnerList[runnerIndex].id+" is dead. I am respawning it now."),runners.setAlive(runnerList[runnerIndex].id,!1),spawnRunner(runnerList[runnerIndex].id)),runnerIndex<runnerList.length-1?runnerIndex++:(runnerIndex=0,runnerList=runners.list()),setTimeout(function(){setImmediate(monitorRunners)},5e3)):(winston.log("info","There are no available runners now. I am going to spin one up now."),spawnRunner(),setTimeout(function(){applications.deployApps(applications.list()),monitorRunners()},3e4))}function generateID(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function ask(a,b,c){var d=process.stdin,e=process.stdout;d.resume(),e.write(a+": "),d.once("data",function(d){d=d.toString().trim();var f=new RegExp(b);f.test(d)?c(d):(e.write("It should match: "+f+"\n"),ask(a,b,c))})}var express=require("express"),routes=require("./routes"),dbService=require("dbService"),runnersRoute=require("./routes/runnersRoute"),applicationsRoute=require("./routes/applicationsRoute"),runners=require("./runners"),applications=require("./applications"),http=require("http"),path=require("path"),SSHClient=require("NodeSSH"),Expect=require("node-expect"),winston=require("winston"),asciimo=require("asciimo").Figlet;fs=require("fs");var app=express();app.set("port",process.env.PORT||2e3),app.set("views",__dirname+"/views"),app.use(express.favicon()),app.use(express.logger("dev")),app.use(express.bodyParser()),app.use(express.methodOverride()),app.use(app.router),applicationsRoute.init(runners,applications),runnersRoute.init(runners,applications),"development"==app.get("env")&&app.use(express.errorHandler()),app.get("/",routes.index),app.get("/runners/list",runnersRoute.list),app.get("/runners/log",runnersRoute.log),app.post("/runners/ping",runnersRoute.ping),app.post("/runners/add",runnersRoute.add),app.post("/runners/remove",runnersRoute.removeRunner),app.post("/applications/deploy",applicationsRoute.deploy);var runnerList,bareMetalList,currentRoundRobinIndex=0,runnerIndex=0,TIMEOUT_TIME=18e4;parseConfigurationFile(function(){asciimo.write("Open SAAS","Banner",function(a){console.log(a),console.log("\n\n\n\n")}),http.createServer(app).listen(app.get("port"),function(){winston.log("info","Orchestrator Service listening on port "+app.get("port")),winston.log("info","Winston logging has started.")}),runnerList=runners.list(),monitorRunners(),applications.add("orchestratorServiceManagement")});